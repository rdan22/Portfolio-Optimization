# -*- coding: utf-8 -*-
"""Stock Trading with the OBV strategy.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1YUVC_NB961rkiyeTAqLRzL5X_aVVuiN1
"""

#Description: This program uses on-Balance Volume (OBV) to determine when to buy and sell stocks.

#Import the libraries
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
plt.style.use('fivethirtyeight')

#Store the data
df = pd.read_csv('TSLA.csv')
#Set the data to be the index
df = df.set_index(pd.DatetimeIndex(df['Date'].values))
#Show the data
df

#Visualize the stock price
plt.figure(figsize=(12.2, 4.5))
plt.plot(df['Close'], label='Close')
plt.title('Close Price')
plt.xlabel('Date', fontsize= 18)
plt.ylabel('USD Price', fontsize= 18)
plt.show()

#Calculate the OBV
OBV = []
OBV.append(0)

#Loop through the data set (close price) from the second row (index 1) to the end of the data set
for i in range(1, len(df.Close)):
  if df.Close[i] > df.Close[i - 1]:
    OBV.append(OBV[-1] + df.Volume[i])
  elif df.Close[i] < df.Close[i - 1]:
    OBV.append(OBV[-1] - df.Volume[i])
  else:
    OBV.append(OBV[-1])

#Store the OBV and OBV Exponential Moving Average (EMA) into new columns
df['OBV'] = OBV
df['OBV_EMA'] = df['OBV'].ewm(span=20).mean()
#Show the data
df

#Create and plot graph
plt.figure(figsize=(12.2, 4.5))
plt.plot(df['OBV'], label='OBV', color= 'orange')
plt.plot(df['OBV_EMA'], label='OBV_EMA', color= 'purple')
plt.title('OBV and OBV_EMA')
plt.xlabel('Date', fontsize= 18)
plt.ylabel('USD Price', fontsize= 18)
plt.show()

#Buy the stock whenever the OBV goes above the OBV_EMA
#Sell the stock whenever the OBV EMA goes above the OBV
def buy_sell(signal, col1, col2):
  sigPriceBuy = []
  sigPriceSell = []
  flag = -1
  #Loop through the data set
  #Note col1 is OBV and col2 is OBV_EMA
  for i in range(0, len(signal)):
    if signal[col1][i] > signal[col2][i] and flag != 1:
      sigPriceBuy.append(signal['Close'][i])
      sigPriceSell.append(np.nan)
      flag = 1
    elif signal[col1][i] < signal[col2][i] and flag != 0:
      sigPriceBuy.append(np.nan)
      sigPriceSell.append(signal['Close'][i])
      flag = 0
    else:
      sigPriceBuy.append(np.nan)
      sigPriceSell.append(np.nan)
    
  return (sigPriceBuy, sigPriceSell)

#Create buy and sell columns
x = buy_sell(df, 'OBV', 'OBV_EMA')
df['Buy_Signal_Price'] = x[0]
df['Sell_Signal_Price'] = x[1]
#Show the data
df

#Plot the buy and sell prices
plt.figure(figsize=(12.2, 4.5))
plt.plot(df['Close'], label='Close', alpha = 0.5)
plt.scatter(df.index, df['Buy_Signal_Price'], label='Buy', marker= '^', alpha = 1, color ='green')
plt.scatter(df.index, df['Sell_Signal_Price'], label='Sell', marker= 'v', alpha = 1, color= 'red')
plt.title('TSLA Buy and Sell Signals')
plt.xlabel('Date', fontsize= 18)
plt.ylabel('USD Price', fontsize= 18)
plt.legend(loc='upper left')
plt.show()