# -*- coding: utf-8 -*-
"""Algorithmic Trading Using MFI.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1mperwN3G62ODnUZDLEnBEvwBLqMMyNqR
"""

#Description: This program uses the Money Flow Index to determine when to buy and sell stocks.

#Import the libraries
import warnings
import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
plt.style.use('fivethirtyeight')
warnings.filterwarnings('ignore')

#Get the data
df = pd.read_csv('TSLA.csv')
#Set the index
df = df.set_index(pd.DatetimeIndex(df['Date'].values))
df

#Visualize the data
plt.figure(figsize=(12.2, 4.5))
plt.plot(df['Close'], label = 'Close Price')
plt.title('TSLA Close Price')
plt.xlabel('Date')
plt.ylabel('Close Price USD')
plt.legend(df.columns.values, loc='upper left')
plt.show()

#Calculate the typical price 
typical_price = (df['Close'] + df['High'] + df['Low']) / 3
typical_price

#Get the period
#Typically MFI uses a period of 14 days
period = 14

#Calculate the money flow
money_flow = typical_price * df['Volume']
money_flow

#Get all of the positive and negative money flows
positive_flow = []
negative_flow = []

#Loop through the typical price
for i in range(1, len(typical_price)):
  if typical_price[i] > typical_price[i - 1]:
    positive_flow.append(money_flow[i - 1])
    negative_flow.append(0)
  elif typical_price[i] < typical_price[i - 1]:
    negative_flow.append(money_flow[i - 1])
    positive_flow.append(0)
  else:
    positive_flow.append(0)
    negative_flow.append(0)

#Get all of the positive and negative money flows within the time period
positive_mf = []
negative_mf = []

for i in range(period - 1, len(positive_flow)):
  positive_mf.append(sum(positive_flow[i + 1 - period : i + 1]))
for i in range(period - 1, len(negative_flow)):
  negative_mf.append(sum(negative_flow[i + 1 - period : i + 1]))

#Calculate the money flow index
mfi = 100 * (np.array(positive_mf) / (np.array(positive_mf) + np.array(negative_mf)))
mfi

#Visualize the MFI
df2 = pd.DataFrame()
df2['MFI'] = mfi
#Create the plot
plt.figure(figsize=(12.2, 4.5))
plt.plot(df2['MFI'], label = 'MFI')
#Overbought and oversold lines
plt.axhline(15, linestyle = '--', color = 'orange')
plt.axhline(30, linestyle = '--', color = 'blue')
plt.axhline(70, linestyle = '--', color = 'blue')
plt.axhline(90, linestyle = '--', color = 'orange')
plt.title('TSLA MFI')
plt.ylabel('MFI Values')
plt.show()

#Create a new data frame
new_df = pd.DataFrame()
new_df = df[period:]
new_df['MFI'] = mfi

#Show the new data frame
new_df

#Create a function to get the buy and sell signals
def get_signal(data, high, low):
  buy_signal = []
  sell_signal = []

  for i in range(len(data['MFI'])):
    if data['MFI'][i] > high:
      buy_signal.append(np.nan)
      sell_signal.append(data['Close'][i])
    elif data['MFI'][i] < low:
      sell_signal.append(np.nan)
      buy_signal.append(data['Close'][i])
    else:
      sell_signal.append(np.nan)
      buy_signal.append(np.nan)
 
  return (buy_signal, sell_signal)

#Add new columns (Buy and Sell)
new_df['Buy'] = get_signal(new_df, 70, 30)[0]
new_df['Sell'] = get_signal(new_df, 70, 30)[1]
#Show the data
new_df

#Plot the data
plt.figure(figsize=(12.2, 4.5))
plt.plot(new_df['Close'], label = 'Close Price', alpha = 0.5)
plt.scatter(new_df.index, new_df['Buy'], color='green', label='Buy Signal', marker='^', alpha=1)
plt.scatter(new_df.index, new_df['Sell'], color='red', label='Sell Signal', marker='v', alpha=1)
plt.title('TSLA Close Price')
plt.xlabel('Date')
plt.ylabel('Close Price USD')
plt.legend(loc='upper left')
plt.show()
#Create the plot
plt.figure(figsize=(12.2, 4.5))
plt.plot(new_df['MFI'], label = 'MFI')
#Overbought and oversold lines
plt.axhline(15, linestyle = '--', color = 'orange')
plt.axhline(30, linestyle = '--', color = 'blue')
plt.axhline(70, linestyle = '--', color = 'blue')
plt.axhline(90, linestyle = '--', color = 'orange')
plt.title('TSLA MFI')
plt.ylabel('MFI Values')
plt.show()